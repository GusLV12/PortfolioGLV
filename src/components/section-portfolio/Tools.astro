---
import TopLayout from '../../layouts/TopLayout.astro';
import BottomLayout from '../../layouts/BottomLayout.astro';
import ToolsCard from '../../components/ToolsCard.astro';

import { contentfulClient } from '../../Auth/auth';
import type { EntryFieldTypes } from 'contentful';

interface Project {
  contentTypeId: 'programmingLanguages';
  fields: {
    technology: EntryFieldTypes.AssetLink;
  };
}

interface Tools {
  contentTypeId: 'developmentTools',
  fields: {
    tools: EntryFieldTypes.AssetLink;
  }
}

const entriesLanguages = await contentfulClient.getEntries<Project>({});
const programmingLanguages = entriesLanguages.items.filter(item => item.sys.contentType.sys.id === 'programmingLanguages');
const entriesTools = await contentfulClient.getEntries<Tools>({});
const programmingTools = entriesTools.items.filter(item => item.sys.contentType.sys.id === 'developmentTools');
console.log('data: ', entriesLanguages, entriesTools );
---


  <main class="flex min-h-[80vh] flex-auto flex-col" transition:animate="slide">
    <TopLayout>
      <h2 class="scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight first:mt-0">
        Programming Languages
      </h2>
    </TopLayout>
    <BottomLayout>
      <div class="flex w-full flex-wrap justify-center gap-2">
        {programmingLanguages.map((programmingLanguage: any) => {
          const imgUrl = programmingLanguage?.fields?.technology?.fields?.file?.url;
          if (!imgUrl || typeof imgUrl !== 'string') {
            console.error('Invalid image URL:', imgUrl);
            return null;
          }
          return (
            <ToolsCard
              key={programmingLanguage?.sys?.id}
              imagePath={imgUrl}
            />
          );
        })}
      </div>
    </BottomLayout>

    <TopLayout>
      <h2 class="scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight first:mt-0">
        Development Tools 
      </h2>
    </TopLayout>
    <BottomLayout>
      <div class="flex w-full flex-wrap justify-center gap-2">
        {programmingTools.map((programmingTool: any) => {
          const imgUrl = programmingTool?.fields?.tools?.fields?.file?.url;
          if (!imgUrl || typeof imgUrl !== 'string') {
            console.error('Invalid image URL:', imgUrl);
            return null;
          }
          return (
            <ToolsCard
              key={programmingTool?.sys?.id}
              imagePath={imgUrl}
            />
          );
        })}
      </div>
    </BottomLayout>
  </main>

